{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","vxpay","VXPay","VXPayConfig","window","isLoggedIn","username","_this2","openVxPay","openVxPayHandler","bind","showProgress","showProgressHandler","onLogin","onLoginHandler","hooks","then","hooksConfig","onSuccess","openLogin","setState","message","user","nickname","userPanel","react_default","a","createElement","className","onClick","style","cursor","src","logo","alt","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8RAgEeA,cA1Dd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,MAAY,IAAIC,QAAM,IAAIC,cAAYC,SACtCC,YAAY,EACZC,SAAU,IANOb,oFAWE,IAAAc,EAAAX,KACpBA,KAAKY,UAAYZ,KAAKa,iBAAiBC,KAAKd,MAC5CA,KAAKe,aAAef,KAAKgB,oBAAoBF,KAAKd,MAClDA,KAAKiB,QAAUjB,KAAKkB,eAAeJ,KAAKd,MAGxCA,KAAKI,MAAMC,MAAMc,MAAMC,KAAK,SAAAC,GAC3BA,EAAYJ,QAAQN,EAAKI,cACzBM,EAAYC,UAAUX,EAAKM,sDAK5BjB,KAAKI,MAAMC,MAAMkB,0DAOjBvB,KAAKwB,SAAS,CAAEf,WAAYT,KAAKI,MAAMC,MAAMI,sDAM/BgB,GACdzB,KAAKwB,SAAS,CAAEd,SAAUe,EAAQC,KAAKC,4CAIvC,IAAMC,EAAY5B,KAAKI,MAAMK,WAC1BoB,EAAAC,EAAAC,cAAA,sBAAc/B,KAAKI,MAAMM,UACzBmB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAASjC,KAAKY,UAAWsB,MAAO,CAAEC,OAAQ,YAAvE,SAEH,OACCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzCT,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,wBAAf,gBACCH,WApDYW,aCKEC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,kCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.bfe6b45e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo               from './logo.svg';\nimport './App.css';\nimport { VXPay, VXPayConfig } from 'vxpay-js';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tvxpay:      new VXPay(new VXPayConfig(window)),\n\t\t\tisLoggedIn: false,\n\t\t\tusername: '',\n\t\t};\n\t}\n\n\n\tcomponentWillMount() {\n\t\tthis.openVxPay = this.openVxPayHandler.bind(this);\n\t\tthis.showProgress = this.showProgressHandler.bind(this);\n\t\tthis.onLogin = this.onLoginHandler.bind(this);\n\n\t\t// add hooks\n\t\tthis.state.vxpay.hooks.then(hooksConfig => {\n\t\t\thooksConfig.onLogin(this.showProgress);\n\t\t\thooksConfig.onSuccess(this.onLogin);\n\t\t})\n\t}\n\n\topenVxPayHandler() {\n\t\tthis.state.vxpay.openLogin();\n\t}\n\n\t/**\n\t * [@param {VXPayLoggedInMessage} msg]\n\t */\n\tshowProgressHandler() {\n\t\tthis.setState({ isLoggedIn: this.state.vxpay.isLoggedIn() });\n\t}\n\n\t/**\n\t * @param {VXPaySuccessMessage} message\n\t */\n\tonLoginHandler(message) {\n\t\tthis.setState({ username: message.user.nickname });\n\t}\n\n\trender() {\n\t\tconst userPanel = this.state.isLoggedIn\n\t\t\t? <span>Hello, {this.state.username}</span>\n\t\t\t: <button className=\"App-link\" onClick={this.openVxPay} style={{ cursor: \"pointer\" }}>Login</button>;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>Very simple <code>vxpay-js</code> React demo.</p>\n\t\t\t\t\t{userPanel}\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}